"""
Aplica»õie desktop cu interfa»õƒÉ prietenoasƒÉ pentru:
 - Selectarea unui director cu fi»ôiere .db
 - Afi»ôarea listei de fi»ôiere .db gƒÉsite
 - Crearea indexurilor (OptimizeazƒÉ indexuri)
 - Listarea indexurilor existente (ListeazƒÉ indexuri)
 - Opera»õiuni de √Æntre»õinere (VACUUM, ANALYZE)

Versiune modernizatƒÉ cu PyQt5 »ôi styling consistent cu modulul Chitan»õe CAR.
Suport complet pentru bazele clonate EUR »ôi procesare inteligentƒÉ.
"""
import os
import glob
import sqlite3
import sys
from datetime import date
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
    QPushButton, QMessageBox, QFileDialog, QFrame, QProgressBar,
    QGroupBox, QGridLayout, QListWidget, QTextEdit, QSplitter
)
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtCore import Qt, QTimer, QTime, QThread, pyqtSignal


class DatabaseIndexer(QThread):
    """Thread pentru opera»õiuni de indexare √Æn background"""
    progress_updated = pyqtSignal(int, str)
    operation_completed = pyqtSignal(str, dict)
    log_message = pyqtSignal(str)

    def __init__(self, operation, databases, parent=None):
        super().__init__(parent)
        self.operation = operation
        self.databases = databases
        self.cancelled = False

    def run(self):
        try:
            if self.operation == "optimize":
                self._optimize_indexes()
            elif self.operation == "list":
                self._list_indexes()
            elif self.operation == "maintenance":
                self._perform_maintenance()
        except Exception as e:
            self.log_message.emit(f"‚ùå Eroare generalƒÉ: {str(e)}")

    def cancel_operation(self):
        self.cancelled = True

    def _optimize_indexes(self):
        """OptimizeazƒÉ indexurile pentru bazele de date selectate"""
        rezultate = {}
        total_dbs = len(self.databases)

        self.progress_updated.emit(5, "Ini»õializare optimizare indexuri...")

        for i, baza in enumerate(self.databases):
            if self.cancelled:
                return

            key = os.path.basename(baza)
            self.log_message.emit(f"üîß Procesare: {key}")

            # Ob»õine indexurile specifice pentru aceastƒÉ bazƒÉ
            comenzi = self._get_database_indexes(baza)

            if not comenzi:
                self.log_message.emit(f"‚ÑπÔ∏è [{key}] Niciun index de creat")
                rezultate[key] = "Niciun index de creat"
                continue

            try:
                conn = sqlite3.connect(baza)
                cur = conn.cursor()

                for j, sql in enumerate(comenzi):
                    if self.cancelled:
                        conn.close()
                        return

                    cur.execute(sql)
                    self.log_message.emit(f"‚úÖ [{key}] Executat: {sql}")

                    # Update progres
                    progress = 10 + int(
                        ((i * len(comenzi) + j + 1) / (total_dbs * max(len(c) for c in [comenzi] if c))) * 80)
                    self.progress_updated.emit(progress, f"Indexare {key}: {j + 1}/{len(comenzi)}")

                conn.commit()
                conn.close()
                rezultate[key] = "Indexuri create/verificate cu succes"
                self.log_message.emit(f"üéØ [{key}] Optimizare completƒÉ")

            except Exception as e:
                self.log_message.emit(f"‚ùå [{key}] Eroare: {e}")
                rezultate[key] = f"Eroare: {e}"

        # RaporteazƒÉ rezultatele
        self.progress_updated.emit(100, "Optimizare completƒÉ!")
        self._log_summary(rezultate, "optimizare")
        self.operation_completed.emit("optimize", rezultate)

    def _list_indexes(self):
        """ListeazƒÉ indexurile existente"""
        rezultate = {}
        total_dbs = len(self.databases)

        self.progress_updated.emit(10, "Ini»õializare listare indexuri...")

        for i, baza in enumerate(self.databases):
            if self.cancelled:
                return

            key = os.path.basename(baza)
            self.log_message.emit(f"üìä Analizare: {key}")

            try:
                conn = sqlite3.connect(baza)
                cursor = conn.cursor()
                cursor.execute("SELECT name, tbl_name, sql FROM sqlite_master WHERE type='index';")
                indexuri = cursor.fetchall()
                conn.close()

                self.log_message.emit(f"\nüìã Indexuri √Æn {key}:")
                if indexuri:
                    for name, tabel, sql in indexuri:
                        if sql:  # IgnorƒÉ indexurile automate
                            self.log_message.emit(f"  üîπ {name} (tabel: {tabel})")
                            self.log_message.emit(f"     SQL: {sql}")
                        else:
                            self.log_message.emit(f"  üî∏ {name} (tabel: {tabel}) - index automat")
                else:
                    self.log_message.emit("  ‚ùå (niciun index definit)")

                rezultate[key] = indexuri

                # Update progres
                progress = 20 + int((i + 1) / total_dbs * 70)
                self.progress_updated.emit(progress, f"Analizat: {key}")

            except Exception as e:
                self.log_message.emit(f"‚ùå [{key}] Eroare la listare: {e}")
                rezultate[key] = []

        self.progress_updated.emit(100, "Listare completƒÉ!")
        self.operation_completed.emit("list", rezultate)

    def _perform_maintenance(self):
        """EfectueazƒÉ opera»õiuni de √Æntre»õinere"""
        rezultate = {}
        total_dbs = len(self.databases)

        self.progress_updated.emit(5, "Ini»õializare √Æntre»õinere...")

        for i, baza in enumerate(self.databases):
            if self.cancelled:
                return

            key = os.path.basename(baza)
            self.log_message.emit(f"üßπ √éntre»õinere: {key}")

            try:
                conn = sqlite3.connect(baza)
                cur = conn.cursor()

                # VACUUM
                self.progress_updated.emit(10 + int(i / total_dbs * 40), f"VACUUM pe {key}...")
                cur.execute("VACUUM;")
                self.log_message.emit(f"‚úÖ [{key}] VACUUM executat")

                if self.cancelled:
                    conn.close()
                    return

                # ANALYZE
                self.progress_updated.emit(50 + int(i / total_dbs * 40), f"ANALYZE pe {key}...")
                cur.execute("ANALYZE;")
                self.log_message.emit(f"‚úÖ [{key}] ANALYZE executat")

                conn.commit()
                conn.close()
                rezultate[key] = "VACUUM »ôi ANALYZE executate cu succes"
                self.log_message.emit(f"üéØ [{key}] √éntre»õinere completƒÉ")

            except Exception as e:
                self.log_message.emit(f"‚ùå [{key}] Eroare la √Æntre»õinere: {e}")
                rezultate[key] = f"Eroare: {e}"

        # RaporteazƒÉ rezultatele
        self.progress_updated.emit(100, "√éntre»õinere completƒÉ!")
        self._log_summary(rezultate, "√Æntre»õinere")
        self.operation_completed.emit("maintenance", rezultate)

    def _log_summary(self, rezultate, operation_name):
        """LogheazƒÉ un sumar al rezultatelor"""
        self.log_message.emit(f"\nüìä Rezumat {operation_name}:")
        for key, result in rezultate.items():
            status = "‚úÖ" if "succes" in str(result).lower() else "‚ùå"
            self.log_message.emit(f"{status} {key}: {result}")

    def _get_database_indexes(self, db_path):
        """DeterminƒÉ indexurile pentru o bazƒÉ de date specificƒÉ - versiune hibridƒÉ"""
        filename = os.path.basename(db_path).lower()

        # NormalizeazƒÉ numele pentru bazele EUR (eliminƒÉ sufixul EUR)
        base_name = filename.replace('eur.db', '.db')

        # Configura»õii specifice cunoscute
        specific_configs = {
            "membrii.db": [
                "CREATE INDEX IF NOT EXISTS idx_fisa ON MEMBRII(NR_FISA);",
                "CREATE INDEX IF NOT EXISTS idx_nume ON MEMBRII(NUM_PREN);"
            ],
            "depcred.db": [
                "CREATE INDEX IF NOT EXISTS idx_depcred_compound ON DEPCRED(NR_FISA, ANUL, LUNA);",
                "CREATE INDEX IF NOT EXISTS idx_depcred_fisa ON DEPCRED(NR_FISA);",
                "CREATE INDEX IF NOT EXISTS idx_depcred_perioada ON DEPCRED(ANUL, LUNA);"
            ],
            "depcredm.db": [
                "CREATE INDEX IF NOT EXISTS idx_depcredm_compound ON DEPCREDM(NR_FISA, ANUL, LUNA);",
                "CREATE INDEX IF NOT EXISTS idx_depcredm_fisa ON DEPCREDM(NR_FISA);"
            ],
            "activi.db": [
                "CREATE INDEX IF NOT EXISTS idx_activi_numpren ON ACTIVI(NUM_PREN);",
                "CREATE INDEX IF NOT EXISTS idx_activi_depsold ON ACTIVI(DEP_SOLD);",
                "CREATE INDEX IF NOT EXISTS idx_activi_fisa ON ACTIVI(NR_FISA);"
            ],
            "inactivi.db": [
                "CREATE INDEX IF NOT EXISTS idx_inactivi_fisa ON INACTIVI(NR_FISA);",
                "CREATE INDEX IF NOT EXISTS idx_inactivi_nume ON INACTIVI(NUM_PREN);"
            ],
            "lichidati.db": [
                "CREATE INDEX IF NOT EXISTS idx_lichidati_fisa ON LICHIDATI(NR_FISA);",
                "CREATE INDEX IF NOT EXISTS idx_lichidati_data ON LICHIDATI(data_lichidare);"
            ],
        }

        # ReturneazƒÉ configura»õia specificƒÉ dacƒÉ existƒÉ
        if base_name in specific_configs:
            self.log_message.emit(f"üéØ [{filename}] Folosesc configura»õia specificƒÉ pentru {base_name}")
            return specific_configs[base_name]

        # Pentru baze necunoscute, genereazƒÉ indexuri generice
        self.log_message.emit(f"üîç [{filename}] Generez indexuri generice prin analizƒÉ")
        return self._generate_generic_indexes(db_path)

    def _generate_generic_indexes(self, db_path):
        """GenereazƒÉ indexuri generice prin analizarea structurii"""
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()

            # DetecteazƒÉ tabelele »ôi coloanele
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()

            indexes = []
            for (table_name,) in tables:
                # DetecteazƒÉ coloanele poten»õial importante
                cursor.execute(f"PRAGMA table_info({table_name});")
                columns = cursor.fetchall()

                for col in columns:
                    col_name = col[1]
                    # CreeazƒÉ indexuri pentru coloane uzuale
                    if any(keyword in col_name.upper() for keyword in
                           ['NR_FISA', 'ANUL', 'LUNA', 'ID', 'FISA', 'DATA', 'NUM_PREN']):
                        index_name = f"idx_{table_name.lower()}_{col_name.lower()}"
                        indexes.append(
                            f"CREATE INDEX IF NOT EXISTS {index_name} "
                            f"ON {table_name}({col_name});"
                        )

                # √éncearcƒÉ sƒÉ creeze un index compus pentru coloane importante
                important_cols = []
                for col in columns:
                    col_name = col[1]
                    if col_name.upper() in ['NR_FISA', 'ANUL', 'LUNA']:
                        important_cols.append(col_name)

                if len(important_cols) >= 2:
                    compound_cols = ', '.join(important_cols)
                    index_name = f"idx_{table_name.lower()}_compound"
                    indexes.append(
                        f"CREATE INDEX IF NOT EXISTS {index_name} "
                        f"ON {table_name}({compound_cols});"
                    )

            conn.close()
            return indexes

        except Exception as e:
            self.log_message.emit(f"‚ùå Eroare la generarea indexurilor generice: {e}")
            return []


class OptimizareIndexWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.database_directory = self._get_database_directory()
        self.indexer_thread = None

        # Watchdog anti-√Ænghe»õare
        self.last_activity = QTime.currentTime()
        self.watchdog_timer = QTimer(self)
        self.watchdog_timer.timeout.connect(self._watchdog_check)
        self.watchdog_timer.start(3000)

        self._init_ui()
        self._apply_styles()
        self._update_file_list()
        self._log_message("‚úÖ Manager Indexuri SQLite ini»õializat")
        self._log_message("üõ°Ô∏è Sistem anti-√Ænghe»õare activ")
        self._log_message("üîÑ Suport complet pentru baze EUR clonate")

    def _get_database_directory(self):
        """DeterminƒÉ directorul cu bazele de date"""
        try:
            if getattr(sys, 'frozen', False):
                return os.path.dirname(sys.executable)
            else:
                return os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        except:
            return os.getcwd()

    def _init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(5, 5, 5, 5)
        main_layout.setSpacing(5)

        # Layout principal cu splitter
        splitter = QSplitter(Qt.Horizontal)

        # Panoul st√¢ng - configurare
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setSpacing(6)

        # Grupa director
        dir_group = QGroupBox("üìÅ Director Baze de Date")
        dir_group.setObjectName("dirGroup")
        dir_layout = QVBoxLayout(dir_group)

        # Linia pentru director
        dir_input_layout = QHBoxLayout()
        self.dir_input = QLineEdit()
        self.dir_input.setObjectName("dirInput")
        self.dir_input.setText(self.database_directory)
        self.dir_input.setPlaceholderText("Selecta»õi directorul cu fi»ôierele .db...")
        dir_input_layout.addWidget(self.dir_input)

        self.btn_browse = QPushButton("üìÇ RƒÉsfoie»ôte")
        self.btn_browse.setObjectName("browseButton")
        self.btn_browse.clicked.connect(self._browse_directory)
        dir_input_layout.addWidget(self.btn_browse)

        self.btn_refresh = QPushButton("üîÑ")
        self.btn_refresh.setObjectName("refreshButton")
        self.btn_refresh.clicked.connect(self._update_file_list)
        self.btn_refresh.setMaximumWidth(35)
        dir_input_layout.addWidget(self.btn_refresh)

        dir_layout.addLayout(dir_input_layout)
        left_layout.addWidget(dir_group)

        # Grupa liste fi»ôiere
        files_group = QGroupBox("üìã Fi»ôiere .db GƒÉsite")
        files_group.setObjectName("filesGroup")
        files_layout = QVBoxLayout(files_group)

        self.file_list = QListWidget()
        self.file_list.setObjectName("fileList")
        self.file_list.setSelectionMode(QListWidget.MultiSelection)
        files_layout.addWidget(self.file_list)

        # Info label
        self.info_label = QLabel("üí° Selecta»õi fi»ôiere sau lƒÉsa»õi gol pentru toate")
        self.info_label.setObjectName("infoLabel")
        self.info_label.setWordWrap(True)
        files_layout.addWidget(self.info_label)

        left_layout.addWidget(files_group)

        # Grupa ac»õiuni
        actions_group = QGroupBox("‚ö° Opera»õii")
        actions_group.setObjectName("actionsGroup")
        actions_layout = QGridLayout(actions_group)
        actions_layout.setSpacing(8)

        self.btn_optimize = QPushButton("üöÄ OptimizeazƒÉ Indexuri")
        self.btn_optimize.setObjectName("optimizeButton")
        self.btn_optimize.clicked.connect(self._optimize_indexes)
        actions_layout.addWidget(self.btn_optimize, 0, 0)

        self.btn_list = QPushButton("üìä ListeazƒÉ Indexuri")
        self.btn_list.setObjectName("listButton")
        self.btn_list.clicked.connect(self._list_indexes)
        actions_layout.addWidget(self.btn_list, 0, 1)

        self.btn_maintenance = QPushButton("üßπ √éntre»õinere DB")
        self.btn_maintenance.setObjectName("maintenanceButton")
        self.btn_maintenance.clicked.connect(self._perform_maintenance)
        actions_layout.addWidget(self.btn_maintenance, 1, 0, 1, 2)

        left_layout.addWidget(actions_group)

        # Bara de progres
        progress_group = QGroupBox("üìà Progres Opera»õii")
        progress_group.setObjectName("progressGroup")
        progress_layout = QVBoxLayout(progress_group)

        self.progress_bar = QProgressBar()
        self.progress_bar.setObjectName("progressBar")
        self.progress_bar.setVisible(False)
        self.progress_bar.setMaximum(100)
        self.progress_bar.setTextVisible(True)
        progress_layout.addWidget(self.progress_bar)

        self.progress_label = QLabel("")
        self.progress_label.setObjectName("progressLabel")
        self.progress_label.setVisible(False)
        progress_layout.addWidget(self.progress_label)

        self.btn_cancel = QPushButton("üõë AnuleazƒÉ")
        self.btn_cancel.setObjectName("cancelButton")
        self.btn_cancel.setVisible(False)
        self.btn_cancel.clicked.connect(self._cancel_operation)
        progress_layout.addWidget(self.btn_cancel)

        left_layout.addWidget(progress_group)
        left_layout.addStretch()

        # Panoul drept - jurnal
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)

        log_group = QGroupBox("üìù Jurnal Opera»õii")
        log_group.setObjectName("logGroup")
        log_layout = QVBoxLayout(log_group)

        self.log_text = QTextEdit()
        self.log_text.setObjectName("logText")
        self.log_text.setPlaceholderText("Activitatea va fi √ÆnregistratƒÉ aici...")
        self.log_text.setReadOnly(True)
        log_layout.addWidget(self.log_text)

        # Butoane log
        log_buttons_layout = QHBoxLayout()

        clear_log_btn = QPushButton("üóëÔ∏è")
        clear_log_btn.setObjectName("clearLogButton")
        clear_log_btn.clicked.connect(self.log_text.clear)
        clear_log_btn.setMaximumWidth(30)
        log_buttons_layout.addWidget(clear_log_btn)

        save_log_btn = QPushButton("üíæ")
        save_log_btn.setObjectName("saveLogButton")
        save_log_btn.clicked.connect(self._save_log)
        save_log_btn.setMaximumWidth(30)
        log_buttons_layout.addWidget(save_log_btn)

        log_buttons_layout.addStretch()
        log_layout.addLayout(log_buttons_layout)
        right_layout.addWidget(log_group)

        # AdaugƒÉ widget-urile la splitter
        splitter.addWidget(left_widget)
        splitter.addWidget(right_widget)
        splitter.setSizes([350, 450])  # Propor»õia 35:45

        main_layout.addWidget(splitter)

        # ConectƒÉm semnalele
        self.dir_input.textChanged.connect(self._on_directory_changed)

    def _apply_styles(self):
        self.setStyleSheet("""
            QLabel#titleLabel {
                font-size: 14pt;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
                padding: 5px;
            }
            QLabel#infoLabel {
                font-size: 9pt;
                color: #7f8c8d;
                font-style: italic;
                padding: 4px;
            }
            QLabel#progressLabel {
                font-size: 9pt;
                color: #2c3e50;
                font-weight: bold;
            }
            QGroupBox {
                font-size: 9pt;
                font-weight: bold;
                color: #2c3e50;
                border: 2px solid #bdc3c7;
                border-radius: 6px;
                margin-top: 4px;
                padding-top: 6px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                background-color: #f8f9fa;
            }
            QLineEdit#dirInput {
                border: 2px solid #bdc3c7;
                border-radius: 4px;
                padding: 6px;
                font-size: 9pt;
                background-color: white;
            }
            QLineEdit#dirInput:focus {
                border-color: #3498db;
            }
            QListWidget#fileList {
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                background-color: #ffffff;
                font-size: 9pt;
                selection-background-color: #3498db;
                selection-color: white;
                alternate-background-color: #f8f9fa;
            }
            QListWidget#fileList::item {
                padding: 4px;
                border-bottom: 1px solid #ecf0f1;
            }
            QListWidget#fileList::item:selected {
                background-color: #3498db;
                color: white;
            }
            QPushButton#browseButton {
                background-color: #95a5a6;
                color: white;
                border: 1px solid #7f8c8d;
                border-radius: 4px;
                padding: 6px 12px;
                font-size: 9pt;
                font-weight: bold;
                min-width: 80px;
            }
            QPushButton#browseButton:hover {
                background-color: #7f8c8d;
            }
            QPushButton#refreshButton {
                background-color: #3498db;
                color: white;
                border: 1px solid #2980b9;
                border-radius: 4px;
                padding: 6px;
                font-size: 9pt;
                font-weight: bold;
            }
            QPushButton#refreshButton:hover {
                background-color: #2980b9;
            }
            QPushButton#optimizeButton {
                background-color: #27ae60;
                color: white;
                border: 1px solid #229954;
                border-radius: 6px;
                padding: 10px;
                font-size: 10pt;
                font-weight: bold;
                min-height: 15px;
            }
            QPushButton#optimizeButton:hover {
                background-color: #229954;
            }
            QPushButton#optimizeButton:disabled {
                background-color: #95a5a6;
                border-color: #7f8c8d;
            }
            QPushButton#listButton {
                background-color: #f39c12;
                color: white;
                border: 1px solid #e67e22;
                border-radius: 6px;
                padding: 10px;
                font-size: 10pt;
                font-weight: bold;
                min-height: 15px;
            }
            QPushButton#listButton:hover {
                background-color: #e67e22;
            }
            QPushButton#listButton:disabled {
                background-color: #95a5a6;
                border-color: #7f8c8d;
            }
            QPushButton#maintenanceButton {
                background-color: #9b59b6;
                color: white;
                border: 1px solid #8e44ad;
                border-radius: 6px;
                padding: 10px;
                font-size: 10pt;
                font-weight: bold;
                min-height: 15px;
            }
            QPushButton#maintenanceButton:hover {
                background-color: #8e44ad;
            }
            QPushButton#maintenanceButton:disabled {
                background-color: #95a5a6;
                border-color: #7f8c8d;
            }
            QPushButton#cancelButton {
                background-color: #e74c3c;
                color: white;
                border: 1px solid #c0392b;
                border-radius: 6px;
                padding: 6px;
                font-size: 9pt;
                font-weight: bold;
                min-height: 10px;
            }
            QPushButton#cancelButton:hover {
                background-color: #c0392b;
            }
            QPushButton#clearLogButton, QPushButton#saveLogButton {
                background-color: #e74c3c;
                color: white;
                border: 1px solid #c0392b;
                border-radius: 3px;
                padding: 2px;
                font-size: 8pt;
                font-weight: bold;
            }
            QPushButton#clearLogButton:hover, QPushButton#saveLogButton:hover {
                background-color: #c0392b;
            }
            QPushButton#saveLogButton {
                background-color: #27ae60;
                border-color: #229954;
            }
            QPushButton#saveLogButton:hover {
                background-color: #229954;
            }
            QTextEdit#logText {
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                background-color: #ffffff;
                font-family: 'Courier New', monospace;
                font-size: 9pt;
                padding: 4px;
                line-height: 1.3;
            }
            QProgressBar#progressBar {
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                text-align: center;
                font-weight: bold;
                font-size: 9pt;
            }
            QProgressBar#progressBar::chunk {
                background-color: #27ae60;
                border-radius: 3px;
            }
            QSplitter::handle {
                background-color: #bdc3c7;
                width: 3px;
            }
            QSplitter::handle:hover {
                background-color: #3498db;
            }
        """)

    def _log_message(self, message):
        """AdaugƒÉ un mesaj √Æn jurnal"""
        timestamp = QTime.currentTime().toString("hh:mm:ss")
        formatted_message = f"[{timestamp}] {message}"
        self.log_text.append(formatted_message)
        self.last_activity = QTime.currentTime()

    def _watchdog_check(self):
        """VerificƒÉ starea aplica»õiei"""
        try:
            QApplication.processEvents()

            # Auto-recovery pentru butoane blocate
            if self.indexer_thread and not self.indexer_thread.isRunning():
                self._reset_ui_state()

        except Exception as e:
            self._log_message(f"‚ùå Eroare watchdog: {e}")

    def _browse_directory(self):
        """Deschide dialog pentru selectarea directorului"""
        directory = QFileDialog.getExistingDirectory(
            self, "Selecta»õi directorul cu bazele de date", self.dir_input.text()
        )
        if directory:
            self.dir_input.setText(directory)
            self.database_directory = directory
            self._update_file_list()

    def _on_directory_changed(self):
        """Apelat c√¢nd se schimbƒÉ directorul"""
        QTimer.singleShot(500, self._update_file_list)  # Delay pentru a nu actualiza la fiecare caracter

    def _update_file_list(self):
        """ActualizeazƒÉ lista de fi»ôiere .db cu filtrare inteligentƒÉ"""
        try:
            directory = self.dir_input.text()
            if not os.path.exists(directory):
                self.file_list.clear()
                self.info_label.setText("‚ùå Directorul nu existƒÉ")
                return

            pattern = os.path.join(directory, '*.db')
            all_db_files = glob.glob(pattern)

            # FiltreazƒÉ bazele de date valide
            valid_db_files = self._filter_valid_databases(all_db_files)

            self.file_list.clear()
            for db_file in sorted(valid_db_files):
                filename = os.path.basename(db_file)
                # AdaugƒÉ emojiuri pentru diferitele tipuri
                if 'eur' in filename.lower():
                    icon = "üá™üá∫"  # Flag UE pentru bazele EUR
                elif 'chitante' in filename.lower():
                    icon = "üìÑ"  # Chitan»õe (excluse automat)
                else:
                    icon = "üóÑÔ∏è"  # Baze normale
                self.file_list.addItem(f"{icon} {filename}")

            count = len(valid_db_files)
            excluded_count = len(all_db_files) - count

            if count > 0:
                info_text = f"üìä GƒÉsite {count} baze procesabile"
                if excluded_count > 0:
                    info_text += f" | Excluse {excluded_count} (chitan»õe/temporare)"
                self.info_label.setText(info_text)
                self._log_message(f"üîç Actualizat: gƒÉsite {count} baze valide √Æn {directory}")
                if excluded_count > 0:
                    self._log_message(f"‚ö†Ô∏è  Excluse {excluded_count} fi»ôiere (chitan»õe sau temporare)")
            else:
                self.info_label.setText("‚ùå Nu s-au gƒÉsit baze de date procesabile")

        except Exception as e:
            self._log_message(f"‚ùå Eroare actualizare listƒÉ: {e}")
            self.info_label.setText(f"‚ùå Eroare: {e}")

    def _filter_valid_databases(self, all_db_files):
        """FiltreazƒÉ bazele de date valide pentru procesare"""
        valid_databases = []

        for db_file in all_db_files:
            filename = os.path.basename(db_file).lower()

            # Exclude fi»ôierele temporare/backup
            if any(skip in filename for skip in ['-journal', '-wal', '-shm', '.tmp', '.bak']):
                continue

            # Exclude bazele CHITANTE (nu necesitƒÉ √Æntre»õinere)
            if 'chitante' in filename:
                continue

            # Include toate celelalte baze (inclusiv cele EUR)
            valid_databases.append(db_file)

        return valid_databases

    def _get_selected_databases(self):
        """ReturneazƒÉ lista bazelor de date selectate"""
        selected_items = self.file_list.selectedItems()
        directory = self.dir_input.text()

        if not selected_items:
            # DacƒÉ nu e nimic selectat, folose»ôte toate fi»ôierele valide
            pattern = os.path.join(directory, '*.db')
            all_files = glob.glob(pattern)
            return self._filter_valid_databases(all_files)
        else:
            # Folose»ôte doar fi»ôierele selectate
            selected_files = []
            for item in selected_items:
                # EliminƒÉ emoji-ul »ôi extrage numele fi»ôierului
                filename = item.text().split(' ', 1)[1] if ' ' in item.text() else item.text()
                filepath = os.path.join(directory, filename)
                selected_files.append(filepath)
            return selected_files

    def _optimize_indexes(self):
        """Porne»ôte optimizarea indexurilor"""
        databases = self._get_selected_databases()
        if not databases:
            self._show_warning("FƒÉrƒÉ Date", "Nu s-au gƒÉsit baze de date pentru procesare!")
            return

        self._log_message(f"üöÄ Pornesc optimizarea pentru {len(databases)} baze de date")
        self._log_message("üîÑ Includ suport pentru baze EUR clonate")
        self._start_operation("optimize", databases)

    def _list_indexes(self):
        """Porne»ôte listarea indexurilor"""
        databases = self._get_selected_databases()
        if not databases:
            self._show_warning("FƒÉrƒÉ Date", "Nu s-au gƒÉsit baze de date pentru procesare!")
            return

        self._log_message(f"üìä Pornesc listarea indexurilor pentru {len(databases)} baze de date")
        self._start_operation("list", databases)

    def _perform_maintenance(self):
        """Porne»ôte opera»õiunile de √Æntre»õinere"""
        databases = self._get_selected_databases()
        if not databases:
            self._show_warning("FƒÉrƒÉ Date", "Nu s-au gƒÉsit baze de date pentru procesare!")
            return

        # ConfirmƒÉ opera»õia
        reply = QMessageBox.question(
            self, "Confirmare √éntre»õinere",
            f"Efectua»õi VACUUM »ôi ANALYZE pe {len(databases)} baze de date?\n\n"
            "AceastƒÉ opera»õie poate dura c√¢teva minute pentru baze mari.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self._log_message(f"üßπ Pornesc √Æntre»õinerea pentru {len(databases)} baze de date")
            self._start_operation("maintenance", databases)

    def _start_operation(self, operation, databases):
        """Porne»ôte o opera»õie √Æn background"""
        if self.indexer_thread and self.indexer_thread.isRunning():
            self._show_warning("Opera»õie √Æn Curs", "O opera»õie este deja √Æn desfƒÉ»ôurare!")
            return

        # CreeazƒÉ »ôi configureazƒÉ thread-ul
        self.indexer_thread = DatabaseIndexer(operation, databases, self)
        self.indexer_thread.progress_updated.connect(self._update_progress)
        self.indexer_thread.operation_completed.connect(self._on_operation_completed)
        self.indexer_thread.log_message.connect(self._log_message)

        # SeteazƒÉ interfa»õa pentru procesare
        self._set_ui_for_processing(True)

        # Porne»ôte thread-ul
        self.indexer_thread.start()

    def _update_progress(self, value, message):
        """ActualizeazƒÉ bara de progres"""
        self.progress_bar.setValue(value)
        self.progress_label.setText(message)
        self.last_activity = QTime.currentTime()

    def _on_operation_completed(self, operation, results):
        """GestioneazƒÉ finalizarea opera»õiei cu detalii complete"""
        self._set_ui_for_processing(False)

        # AnalizeazƒÉ rezultatele
        success_list = []
        error_list = []

        for db_key, result in results.items():
            if "succes" in str(result).lower():
                success_list.append(db_key)
            else:
                error_list.append((db_key, str(result)))

        success_count = len(success_list)
        total_count = len(results)

        # Construie»ôte mesajul detaliat
        if operation == "optimize":
            self._show_optimization_results(success_list, error_list, total_count)
            self._log_message(f"üéØ Optimizare completƒÉ: {success_count}/{total_count} baze procesate cu succes")

        elif operation == "list":
            self._log_message(f"üìã Listare completƒÉ: {total_count} baze analizate")

        elif operation == "maintenance":
            self._show_maintenance_results(success_list, error_list, total_count)
            self._log_message(f"üßπ √éntre»õinere completƒÉ: {success_count}/{total_count} baze procesate cu succes")

    def _show_optimization_results(self, success_list, error_list, total_count):
        """Afi»ôeazƒÉ rezultatele optimizƒÉrii cu detalii complete"""
        message_parts = []

        # Header
        message_parts.append(f"üìä Optimizare Indexuri FinalizatƒÉ")
        message_parts.append("=" * 50)

        # Statistici generale
        message_parts.append(f"üìà Total procesate: {total_count} baze de date")
        message_parts.append(f"‚úÖ Succese: {len(success_list)}")
        message_parts.append(f"‚ùå Erori: {len(error_list)}")
        message_parts.append("")

        # Baze procesate cu succes
        if success_list:
            message_parts.append("‚úÖ BAZE OPTIMIZATE CU SUCCES:")
            for db_name in sorted(success_list):
                # IdentificƒÉ tipul bazei
                if 'eur' in db_name.lower():
                    badge = "üá™üá∫ EUR"
                elif any(base in db_name.lower() for base in ['depcred', 'membrii', 'activi']):
                    badge = "üóÑÔ∏è RON"
                else:
                    badge = "üìÑ"
                message_parts.append(f"   üîπ {db_name} [{badge}]")
            message_parts.append("")

        # Baze cu erori
        if error_list:
            message_parts.append("‚ùå BAZE CU PROBLEME:")
            for db_name, error in sorted(error_list):
                # ScurteazƒÉ mesajul de eroare dacƒÉ este prea lung
                short_error = error[:60] + "..." if len(error) > 60 else error
                message_parts.append(f"   üî∏ {db_name}")
                message_parts.append(f"     Motiv: {short_error}")
            message_parts.append("")

        # Footer
        message_parts.append("üí° Pentru detalii complete consulta»õi jurnalul.")

        # Afi»ôeazƒÉ dialog-ul
        self._show_detailed_dialog(
            "üöÄ Rezultate Optimizare",
            "Optimizarea indexurilor s-a finalizat!",
            message_parts
        )

    def _show_maintenance_results(self, success_list, error_list, total_count):
        """Afi»ôeazƒÉ rezultatele √Æntre»õinerii cu detalii complete"""
        message_parts = []

        # Header
        message_parts.append(f"üßπ √éntre»õinere Baze de Date FinalizatƒÉ")
        message_parts.append("=" * 50)

        # Statistici generale
        message_parts.append(f"üìä Total procesate: {total_count} baze de date")
        message_parts.append(f"‚úÖ VACUUM + ANALYZE reu»ôite: {len(success_list)}")
        message_parts.append(f"‚ùå Opera»õiuni cu erori: {len(error_list)}")
        message_parts.append("")

        # Baze procesate cu succes
        if success_list:
            message_parts.append("‚úÖ BAZE √éNTRE»öINUTE CU SUCCES:")
            for db_name in sorted(success_list):
                if 'eur' in db_name.lower():
                    badge = "üá™üá∫ EUR"
                elif any(base in db_name.lower() for base in ['depcred', 'membrii', 'activi']):
                    badge = "üóÑÔ∏è RON"
                else:
                    badge = "üìÑ"
                message_parts.append(f"   üîπ {db_name} [{badge}] - VACUUM + ANALYZE completate")
            message_parts.append("")

        # Baze cu erori
        if error_list:
            message_parts.append("‚ùå BAZE CU PROBLEME:")
            for db_name, error in sorted(error_list):
                short_error = error[:60] + "..." if len(error) > 60 else error
                message_parts.append(f"   üî∏ {db_name}")
                message_parts.append(f"     Motiv: {short_error}")
            message_parts.append("")

        # Footer
        message_parts.append("üí° Verifica»õi jurnalul pentru informa»õii complete.")

        # Afi»ôeazƒÉ dialog-ul
        self._show_detailed_dialog(
            "üßπ Rezultate √éntre»õinere",
            "√éntre»õinerea bazelor de date s-a finalizat!",
            message_parts
        )

    def _show_detailed_dialog(self, title, summary, message_parts):
        """Afi»ôeazƒÉ un dialog detaliat cu rezultate"""
        full_message = "\n".join(message_parts)

        # Folose»ôte un QMessageBox customizat pentru text mai lung
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle(title)
        msg_box.setText(summary)
        msg_box.setDetailedText(full_message)
        msg_box.setIcon(QMessageBox.Information)

        # SeteazƒÉ dimensiunea pentru dialog
        msg_box.setStyleSheet("""
            QMessageBox {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 9pt;
            }
            QMessageBox QTextEdit {
                font-family: 'Courier New', monospace;
                font-size: 9pt;
                min-width: 600px;
                min-height: 400px;
            }
        """)

        msg_box.exec_()

    def _cancel_operation(self):
        """AnuleazƒÉ opera»õia curentƒÉ"""
        if self.indexer_thread and self.indexer_thread.isRunning():
            self.indexer_thread.cancel_operation()
            self.indexer_thread.wait(3000)  # A»ôteaptƒÉ p√¢nƒÉ la 3 secunde
            if self.indexer_thread.isRunning():
                self.indexer_thread.terminate()

            self._set_ui_for_processing(False)
            self._log_message("üõë Opera»õie anulatƒÉ de utilizator")

    def _set_ui_for_processing(self, processing):
        """SeteazƒÉ interfa»õa pentru procesare"""
        # Butoane principale
        self.btn_optimize.setEnabled(not processing)
        self.btn_list.setEnabled(not processing)
        self.btn_maintenance.setEnabled(not processing)
        self.btn_browse.setEnabled(not processing)
        self.btn_refresh.setEnabled(not processing)

        # Controale input
        self.dir_input.setEnabled(not processing)
        self.file_list.setEnabled(not processing)

        # Bara de progres
        self.progress_bar.setVisible(processing)
        self.progress_label.setVisible(processing)
        self.btn_cancel.setVisible(processing)

        if processing:
            self.progress_bar.setValue(0)
            self.progress_label.setText("Ini»õializare...")

    def _reset_ui_state(self):
        """ReseteazƒÉ starea UI"""
        self._set_ui_for_processing(False)
        self.indexer_thread = None

    def _save_log(self):
        """SalveazƒÉ jurnalul"""
        if not self.log_text.toPlainText().strip():
            self._show_warning("Jurnal Gol", "Nu existƒÉ con»õinut de salvat!")
            return

        timestamp = date.today().strftime("%Y%m%d_%H%M%S")
        default_filename = f"jurnal_indexuri_{timestamp}.txt"

        file_path, _ = QFileDialog.getSaveFileName(
            self, "SalveazƒÉ Jurnalul", default_filename, "Text Files (*.txt);;All Files (*)"
        )

        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"Jurnal Manager Indexuri SQLite\n")
                    f.write(f"Generat la: {date.today().strftime('%d/%m/%Y')}\n")
                    f.write(f"Suport baze EUR clonate: DA\n")
                    f.write("=" * 50 + "\n\n")
                    f.write(self.log_text.toPlainText())

                self._show_info("Succes", f"Jurnal salvat!\n\nLoca»õie: {file_path}")
                self._log_message(f"üíæ Jurnal salvat: {os.path.basename(file_path)}")

            except Exception as e:
                self._show_error("Eroare", f"Eroare la salvarea jurnalului:\n{e}")

    def _show_warning(self, title, message):
        """Afi»ôeazƒÉ avertisment"""
        QMessageBox.warning(self, title, message)

    def _show_error(self, title, message):
        """Afi»ôeazƒÉ eroare"""
        QMessageBox.critical(self, title, message)

    def _show_info(self, title, message):
        """Afi»ôeazƒÉ informa»õie"""
        QMessageBox.information(self, title, message)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = OptimizareIndexWidget()
    window.setWindowTitle("üóÇÔ∏è Manager Indexuri SQLite - CAR (EUR Ready)")
    window.resize(900, 700)
    window.show()
    sys.exit(app.exec_())